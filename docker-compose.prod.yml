version: '3'

services:
  application:
    build:
      context: app
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    container_name: backend
    restart: always
    command: gunicorn app.wsgi:application --workers 3 --bind 0.0.0.0:8000 --timeout 120 --access-logfile /var/log/gunicorn/access.log --error-logfile /var/log/gunicorn/error.log --log-level info
    expose:
      - 8000
    volumes:
      - ./app:/app/application
      - static_volume:/app/application/static
      - media_volume:/app/application/media
    depends_on:
      - database

  bot:
    build:
      context: app
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    container_name: tg_bot
    restart: always
    command: python run_polling.py
    volumes:
      - ./app:/app/application
      - static_volume:/app/application/static
      - media_volume:/app/application/media
    depends_on:
      - application

  database:
    image: postgres:16.2-alpine3.18
    env_file: .env.prod
    restart: unless-stopped
    volumes:
      - database-storage:/var/lib/postgresql/data

  nginx:
    build: ./nginx
    ports:
      - '80:80'
      - '443:443'
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - static_volume:/app/application/static
      - media_volume:/app/application/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - application

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 24h & wait $${!}; done;'"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

volumes:
  database-storage:
  static_volume:
  media_volume:
